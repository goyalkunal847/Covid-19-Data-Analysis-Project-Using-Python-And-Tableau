<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20222.22.0624.2136                               -->
<workbook original-version='18.1' source-build='2022.2.0 (20222.22.0624.2136)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='country_wise_latest' inline='true' name='federated.07yy9lf1c66o1r1e1gbpb1axa7vn' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='country_wise_latest' name='textscan.0w911kg1n2legu17r0msv0aplqn2'>
            <connection class='textscan' directory='C:/Users/Kunal Goyal/Downloads' filename='country_wise_latest.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0w911kg1n2legu17r0msv0aplqn2' name='country_wise_latest.csv' table='[country_wise_latest#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='Country/Region' ordinal='0' />
            <column datatype='integer' name='Confirmed' ordinal='1' />
            <column datatype='integer' name='Deaths' ordinal='2' />
            <column datatype='integer' name='Recovered' ordinal='3' />
            <column datatype='integer' name='Active' ordinal='4' />
            <column datatype='integer' name='New cases' ordinal='5' />
            <column datatype='integer' name='New deaths' ordinal='6' />
            <column datatype='integer' name='New recovered' ordinal='7' />
            <column datatype='real' name='Deaths / 100 Cases' ordinal='8' />
            <column datatype='real' name='Recovered / 100 Cases' ordinal='9' />
            <column datatype='real' name='Deaths / 100 Recovered' ordinal='10' />
            <column datatype='integer' name='Confirmed last week' ordinal='11' />
            <column datatype='integer' name='1 week change' ordinal='12' />
            <column datatype='real' name='1 week % increase' ordinal='13' />
            <column datatype='string' name='WHO Region' ordinal='14' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0w911kg1n2legu17r0msv0aplqn2' name='country_wise_latest.csv' table='[country_wise_latest#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='Country/Region' ordinal='0' />
            <column datatype='integer' name='Confirmed' ordinal='1' />
            <column datatype='integer' name='Deaths' ordinal='2' />
            <column datatype='integer' name='Recovered' ordinal='3' />
            <column datatype='integer' name='Active' ordinal='4' />
            <column datatype='integer' name='New cases' ordinal='5' />
            <column datatype='integer' name='New deaths' ordinal='6' />
            <column datatype='integer' name='New recovered' ordinal='7' />
            <column datatype='real' name='Deaths / 100 Cases' ordinal='8' />
            <column datatype='real' name='Recovered / 100 Cases' ordinal='9' />
            <column datatype='real' name='Deaths / 100 Recovered' ordinal='10' />
            <column datatype='integer' name='Confirmed last week' ordinal='11' />
            <column datatype='integer' name='1 week change' ordinal='12' />
            <column datatype='real' name='1 week % increase' ordinal='13' />
            <column datatype='string' name='WHO Region' ordinal='14' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;â‚¹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country/Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country/Region]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Country/Region</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Confirmed</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Confirmed]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Confirmed</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Deaths]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Deaths</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Recovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Recovered]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Recovered</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Active</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Active]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Active</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New cases]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>New cases</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New deaths]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>New deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New recovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New recovered]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>New recovered</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Deaths / 100 Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Deaths / 100 Cases]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Deaths / 100 Cases</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Recovered / 100 Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Recovered / 100 Cases]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Recovered / 100 Cases</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Deaths / 100 Recovered</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Deaths / 100 Recovered]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Deaths / 100 Recovered</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Confirmed last week</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Confirmed last week]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>Confirmed last week</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 week change</remote-name>
            <remote-type>20</remote-type>
            <local-name>[1 week change]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>1 week change</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 week % increase</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 week % increase]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>1 week % increase</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WHO Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WHO Region]</local-name>
            <parent-name>[country_wise_latest.csv]</parent-name>
            <remote-alias>WHO Region</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='1 Week % Increase' datatype='real' name='[1 week % increase]' role='measure' type='quantitative' />
      <column caption='1 Week Change' datatype='integer' name='[1 week change]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='country_wise_latest.csv' datatype='table' name='[__tableau_internal_object_id__].[country_wise_latest.csv_1011CF51544946DB9C030827589F6407]' role='measure' type='quantitative' />
      <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country/Region:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Congo (Kinshasa)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Taiwan*&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;US&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Congo (Brazzaville)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Holy See&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='country_wise_latest.csv' id='country_wise_latest.csv_1011CF51544946DB9C030827589F6407'>
            <properties context=''>
              <relation connection='textscan.0w911kg1n2legu17r0msv0aplqn2' name='country_wise_latest.csv' table='[country_wise_latest#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='string' name='Country/Region' ordinal='0' />
                  <column datatype='integer' name='Confirmed' ordinal='1' />
                  <column datatype='integer' name='Deaths' ordinal='2' />
                  <column datatype='integer' name='Recovered' ordinal='3' />
                  <column datatype='integer' name='Active' ordinal='4' />
                  <column datatype='integer' name='New cases' ordinal='5' />
                  <column datatype='integer' name='New deaths' ordinal='6' />
                  <column datatype='integer' name='New recovered' ordinal='7' />
                  <column datatype='real' name='Deaths / 100 Cases' ordinal='8' />
                  <column datatype='real' name='Recovered / 100 Cases' ordinal='9' />
                  <column datatype='real' name='Deaths / 100 Recovered' ordinal='10' />
                  <column datatype='integer' name='Confirmed last week' ordinal='11' />
                  <column datatype='integer' name='1 week change' ordinal='12' />
                  <column datatype='real' name='1 week % increase' ordinal='13' />
                  <column datatype='string' name='WHO Region' ordinal='14' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='country_wise_latest' name='federated.07yy9lf1c66o1r1e1gbpb1axa7vn' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.07yy9lf1c66o1r1e1gbpb1axa7vn'>
            <column datatype='integer' name='[Active]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Confirmed]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Active]' derivation='Sum' name='[sum:Active:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Confirmed]' derivation='Sum' name='[sum:Confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[none:Country/Region:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country/Region:nk]' member='&quot;US&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[none:Country/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[Longitude (generated)]' field-type='quantitative' max='25916798.707057744' min='-20908004.636357978' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[Latitude (generated)]' field-type='quantitative' max='16291632.50492318' min='-14124480.046611894' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:Confirmed:qk]' />
              <lod column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:Active:qk]' />
              <lod column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:Deaths:qk]' />
              <lod column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:Active:qk]' />
              <lod column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[none:Country/Region:nk]' />
              <geometry column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#75a1c7' />
                <format attr='size' value='1.4172928333282471' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[Latitude (generated)]</rows>
        <cols>[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{5880A7BD-2370-4C55-9300-1B0C3683089F}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run>country vs death vs recovered</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='country_wise_latest' name='federated.07yy9lf1c66o1r1e1gbpb1axa7vn' />
          </datasources>
          <datasource-dependencies datasource='federated.07yy9lf1c66o1r1e1gbpb1axa7vn'>
            <column datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[New recovered]' role='measure' type='quantitative' />
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Deaths]' derivation='Sum' name='[sum:Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[New recovered]' derivation='Sum' name='[sum:New recovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:Deaths:qk]' />
              <text column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[none:Country/Region:nk]' />
              <color column='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:New recovered:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{052A6A40-C67C-4BAC-BE6F-7A70485FC23D}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[none:Country/Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8FB1D8A6-BDE0-4C46-8BBF-E2CE9AF278C0}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[sum:New recovered:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07yy9lf1c66o1r1e1gbpb1axa7vn].[none:Country/Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{09A3C153-40F6-441A-A0B6-E3E96C631DAB}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
